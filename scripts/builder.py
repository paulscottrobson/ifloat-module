# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		builder.py
#		Purpose :	Construct assembler scripts
#		Date :		10th December 2024
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,sys,re

# *******************************************************************************************
#
#										Error class
#
# *******************************************************************************************

class ModuleException(Exception):
	pass


	#
	#		Export the module files.
	#
	def exportFiles(self,h,restartPC,moduleCount):
		h.write("\n")
		incList = []   																	# List of include files
		asmList = []  																	# List of assembly files
		for m in self.modules:   														# For each module			
			files = m.getModuleFiles()													# Get all the source files in this module
			incList += [x for x in files if x.endswith(".inc")]  						# add to appropriate list
			asmList += [x for x in files if x.endswith(".asm")]  						# sort on main file name


# *******************************************************************************************
#
#						File representing a single module in the build
#
# *******************************************************************************************

class Module(object):
	#
	#		Set up a single module.
	#
	def __init__(self,rootDirectory,path):
		path = path.replace(".",os.sep)  												# Remove dot notations.
		self.path = rootDirectory + os.sep + path  										# Module path
		self.name = path.split(os.sep)[-1]  											# Module name
		if not os.path.exists(self.path):  												# Validate path
			raise ModuleException("Cannot find path '"+path+"'")
		self.getExports()  																# Get all files in this module
	#
	#		Get all exportable files
	#
	def getExports(self):
		self.incList = []
		self.asmList = []
		for root,dirs,files in os.walk(self.path): 										# scan the path
			for f in files:  															# Loop through files
				fullName = root + os.sep + f
				if f.endswith(".inc"):
					self.incList.append(fullName) 										# add to the list of inc files.
				if f.endswith(".asm"):
					self.asmList.append(fullName) 										# add to the list of asm files.
	#
	#		Export
	#
	def export(self,h):
		self.incList.sort(key = lambda x:x.split(os.sep)[-1])   						# Sort them on the file name.
		self.asmList.sort(key = lambda x:x.split(os.sep)[-1])
		for f in self.incList: 		 													# Include files
				h.write('\t\t!source "{0}"\n'.format(f))	
		for f in self.asmList:  														# Code files
				h.write('\t\t!source "{0}"\n'.format(f))	

# *******************************************************************************************
#
#										Command Line Options
#
# *******************************************************************************************
#
#		--root=<directory>
#			Sets the current module root directory
#
# *******************************************************************************************


currentDirectory = None

for c in sys.argv[1:]:  																# Scan command line
	if c.startswith("--root="):  														# Set the module root
		currentDirectory = c[7:]
		if not os.path.isdir(currentDirectory):
			raise ModuleException("Unknown directory "+currentDirectory)
	elif c.startswith("--"):
		raise ModuleException("Unknown option "+c)

hTarget = open("__build.tmp","w")
hTarget.write(";\n;\tThis file is automatically generated.\n;\n")

for c in [x for x in sys.argv[1:] if not x.startswith("--")]:
	if currentDirectory is None:							  							# Check there is a root
		raise ModuleException("No root provided")
	Module(currentDirectory,c).export(hTarget) 											# Add a module

hTarget.close()

