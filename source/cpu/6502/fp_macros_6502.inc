; *******************************************************************************************
; *******************************************************************************************
;
;		Name : 		fp_macros_6502.inc
;		Purpose :	Macros (65C02)
;		Date :		9th December 2024
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; *******************************************************************************************
; *******************************************************************************************

; -------------------------------------------------------------------------------------------
;
;						Break in Emulator - should not be in final code
;
; -------------------------------------------------------------------------------------------

!macro debug {
		!byte 	$DB
}

; -------------------------------------------------------------------------------------------
;
;								Register to Register copy macro
;
; -------------------------------------------------------------------------------------------

!macro copyreg .target,.source {
		lda 	.source+0
		sta 	.target+0
		lda 	.source+1
		sta 	.target+1
		lda 	.source+2
		sta 	.target+2
		lda 	.source+3
		sta 	.target+3
		lda 	.source+4
		sta 	.target+4
		lda 	.source+5
		sta 	.target+5
}

; -------------------------------------------------------------------------------------------
;
;										Clear A to zero
;
; -------------------------------------------------------------------------------------------
!macro Clear32A {
		jsr 	FloatClr32A6502
}
; -------------------------------------------------------------------------------------------
;
;									Set A to 32 bit integer in A
;
; -------------------------------------------------------------------------------------------
!macro Set32A {
		jsr 	FloatSet32A6502
}
; -------------------------------------------------------------------------------------------
;
;									Set A to 32 bit integer in A
;
; -------------------------------------------------------------------------------------------
!macro Set32B {
		jsr 	FloatSet32B6502
}
; -------------------------------------------------------------------------------------------
;
;							Copy B to A as 32 bit integer
;
; -------------------------------------------------------------------------------------------
!macro Copy32BA {
		jsr 	FloatCopy32BA6502
}
; -------------------------------------------------------------------------------------------
;
;							Copy A to R as 32 bit integer
;
; -------------------------------------------------------------------------------------------
!macro Copy32AR {
		jsr 	FloatCopy32AR6502
}
; -------------------------------------------------------------------------------------------
;
;							Copy R to A as 32 bit integer
;
; -------------------------------------------------------------------------------------------
!macro Copy32RA {
		jsr 	FloatCopy32RA6502
}
; -------------------------------------------------------------------------------------------
;
;					Add B to A as 32 bit integer, sets N and C 
;
; -------------------------------------------------------------------------------------------
!macro Add32AB {
		jsr 	FloatAdd32AB6502
}
; -------------------------------------------------------------------------------------------
;
;					Sub B from A as 32 bit integer, sets N and C 
;
; -------------------------------------------------------------------------------------------
!macro Sub32AB {
		jsr 	FloatSub32AB6502
}
; -------------------------------------------------------------------------------------------
;
;								Shift A right 1 bit, sets C
;
; -------------------------------------------------------------------------------------------
!macro Shr32A {		
		jsr 	FloatShr32A6502
}
; -------------------------------------------------------------------------------------------
;
;								Shift B right 1 bit, sets C
;
; -------------------------------------------------------------------------------------------
!macro Shr32B {		
		jsr 	FloatShr32B6502
}
; -------------------------------------------------------------------------------------------
;
;								Shift R right 1 bit, sets C
;
; -------------------------------------------------------------------------------------------
!macro Shr32R {		
		jsr 	FloatShr32R6502
}; -------------------------------------------------------------------------------------------
;
;								Shift A left 1 bit, sets C
;
; -------------------------------------------------------------------------------------------
!macro Shl32A {		
		jsr 	FloatShl32A6502
}
; -------------------------------------------------------------------------------------------
;
;								Shift B left 1 bit, sets C
;
; -------------------------------------------------------------------------------------------
!macro Shl32B {		
		jsr 	FloatShl32B6502
}
; -------------------------------------------------------------------------------------------
;
;									Check if A is zero
;
; -------------------------------------------------------------------------------------------
!macro Test32A {		
		jsr 	FloatTest32A6502
}
; -------------------------------------------------------------------------------------------
;
;									Check if B is zero
;
; -------------------------------------------------------------------------------------------
!macro Test32B {		
		jsr 	FloatTest32B6502
}
; -------------------------------------------------------------------------------------------
;
;									Check if R is zero
;
; -------------------------------------------------------------------------------------------
!macro Test32R {		
		jsr 	FloatTest32R6502
}
; -------------------------------------------------------------------------------------------
;
;								Negate A, no signs
;
; -------------------------------------------------------------------------------------------
!macro Neg32A {		
		jsr 	FloatNeg32A6502
}
; -------------------------------------------------------------------------------------------
;
;									Push A on the stack
;
; -------------------------------------------------------------------------------------------
!macro Push32A {		
		jsr 	FloatPush32A6502
}

!macro FPAPushCode {
		ldx 	exprStackPtr
		inc 	exprStackPtr

		lda 	aFlags 						; push A on the stack.
		sta 	exprStack0,x
		lda 	aExponent
		sta 	exprStack1,x
		lda 	aMantissa+0
		sta 	exprStack2,x
		lda 	aMantissa+1
		sta 	exprStack3,x
		lda 	aMantissa+2
		sta 	exprStack4,x
		lda 	aMantissa+3
		sta 	exprStack5,x
}

; -------------------------------------------------------------------------------------------
;
;									Pop B off the stack
;
; -------------------------------------------------------------------------------------------
!macro Pop32B {		
		jsr 	FloatPop32B6502
}

!macro FPBPopCode {
		dec 	exprStackPtr
		ldx 	exprStackPtr

		lda 	exprStack0,x 			; Pop B off the stack.
		sta 	bFlags 						
		lda 	exprStack1,x
		sta 	bExponent
		lda 	exprStack2,x
		sta 	bMantissa+0
		lda 	exprStack3,x
		sta 	bMantissa+1
		lda 	exprStack4,x
		sta 	bMantissa+2
		lda 	exprStack5,x
		sta 	bMantissa+3
}
